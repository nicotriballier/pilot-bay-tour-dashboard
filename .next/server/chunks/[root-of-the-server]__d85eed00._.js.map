{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 3, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 55, "column": 0}, "map": {"version":3,"sources":["file:///Users/nicolastriballier/Documents/GitHub/pilot-bay-tour-dashboard/app/api/weather/route.ts"],"sourcesContent":["import { NextResponse } from 'next/server';\n\nexport async function GET(request: Request) {\n  const { searchParams } = new URL(request.url);\n  const ids = searchParams.get('ids');\n\n  if (!ids) {\n    return NextResponse.json({ error: 'Missing airport IDs' }, { status: 400 });\n  }\n\n  const airportIds = ids.split(',');\n\n  try {\n    // Create AbortController for timeout\n    const controller = new AbortController();\n    const timeoutId = setTimeout(() => controller.abort(), 15000); // 15 second timeout\n\n    console.log(`üå§Ô∏è  Fetching weather data for ${airportIds.length} airports: ${ids}`);\n\n    const response = await fetch(\n      `https://aviationweather.gov/api/data/metar?ids=${ids}&format=json&taf=false`,\n      {\n        headers: {\n          'User-Agent': 'Mozilla/5.0 (compatible; Bay Area Aviation Weather)',\n          'Accept': 'application/json',\n        },\n        signal: controller.signal,\n      }\n    );\n\n    clearTimeout(timeoutId);\n\n    if (!response.ok) {\n      throw new Error(`Aviation Weather API returned ${response.status}: ${response.statusText}`);\n    }\n\n    const data = await response.json();\n\n    // Log successful request for debugging\n    console.log(`‚úÖ Weather data fetched for ${airportIds.length} airports`);\n\n    return NextResponse.json(data);\n  } catch (error) {\n    console.error('‚ùå Error fetching METAR data from aviationweather.gov:', error);\n\n    // Determine the specific error type for better user messaging\n    let errorMessage = 'Weather service temporarily unavailable';\n    let statusCode = 503;\n\n    if (error instanceof Error) {\n      if (error.name === 'AbortError') {\n        errorMessage = 'Weather service timeout - please try again';\n        statusCode = 504;\n      } else if (error.message.includes('ConnectTimeoutError') || error.message.includes('fetch failed')) {\n        errorMessage = 'Aviation weather service (aviationweather.gov) is currently unreachable.';\n        statusCode = 503;\n      }\n    }\n\n    console.error(`üö´ Returning error to user: ${errorMessage}`);\n\n    return NextResponse.json(\n      {\n        error: errorMessage,\n        details: 'Real-time weather data is not available. Do not use for flight planning.',\n        timestamp: new Date().toISOString()\n      },\n      { status: statusCode }\n    );\n  }\n}\n"],"names":[],"mappings":";;;;AAAA;;AAEO,eAAe,IAAI,OAAgB;IACxC,MAAM,EAAE,YAAY,EAAE,GAAG,IAAI,IAAI,QAAQ,GAAG;IAC5C,MAAM,MAAM,aAAa,GAAG,CAAC;IAE7B,IAAI,CAAC,KAAK;QACR,OAAO,gJAAY,CAAC,IAAI,CAAC;YAAE,OAAO;QAAsB,GAAG;YAAE,QAAQ;QAAI;IAC3E;IAEA,MAAM,aAAa,IAAI,KAAK,CAAC;IAE7B,IAAI;QACF,qCAAqC;QACrC,MAAM,aAAa,IAAI;QACvB,MAAM,YAAY,WAAW,IAAM,WAAW,KAAK,IAAI,QAAQ,oBAAoB;QAEnF,QAAQ,GAAG,CAAC,CAAC,+BAA+B,EAAE,WAAW,MAAM,CAAC,WAAW,EAAE,KAAK;QAElF,MAAM,WAAW,MAAM,MACrB,CAAC,+CAA+C,EAAE,IAAI,sBAAsB,CAAC,EAC7E;YACE,SAAS;gBACP,cAAc;gBACd,UAAU;YACZ;YACA,QAAQ,WAAW,MAAM;QAC3B;QAGF,aAAa;QAEb,IAAI,CAAC,SAAS,EAAE,EAAE;YAChB,MAAM,IAAI,MAAM,CAAC,8BAA8B,EAAE,SAAS,MAAM,CAAC,EAAE,EAAE,SAAS,UAAU,EAAE;QAC5F;QAEA,MAAM,OAAO,MAAM,SAAS,IAAI;QAEhC,uCAAuC;QACvC,QAAQ,GAAG,CAAC,CAAC,2BAA2B,EAAE,WAAW,MAAM,CAAC,SAAS,CAAC;QAEtE,OAAO,gJAAY,CAAC,IAAI,CAAC;IAC3B,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC,yDAAyD;QAEvE,8DAA8D;QAC9D,IAAI,eAAe;QACnB,IAAI,aAAa;QAEjB,IAAI,iBAAiB,OAAO;YAC1B,IAAI,MAAM,IAAI,KAAK,cAAc;gBAC/B,eAAe;gBACf,aAAa;YACf,OAAO,IAAI,MAAM,OAAO,CAAC,QAAQ,CAAC,0BAA0B,MAAM,OAAO,CAAC,QAAQ,CAAC,iBAAiB;gBAClG,eAAe;gBACf,aAAa;YACf;QACF;QAEA,QAAQ,KAAK,CAAC,CAAC,4BAA4B,EAAE,cAAc;QAE3D,OAAO,gJAAY,CAAC,IAAI,CACtB;YACE,OAAO;YACP,SAAS;YACT,WAAW,IAAI,OAAO,WAAW;QACnC,GACA;YAAE,QAAQ;QAAW;IAEzB;AACF","debugId":null}}]
}